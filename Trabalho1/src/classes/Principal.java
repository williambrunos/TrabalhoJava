package classes;
import javax.swing.JOptionPane;

/**
 *  Trabalho 1 de Técnicas de Programação - Projeto Java
 *  Nome: William Bruno Sales de Paula Lima
 *  Matrícula: 497345
 *  Professor: Wendley Souza da Silva
 */
public class Principal extends javax.swing.JFrame {
    //Criação de instâncias globais da classe Contas(conta-comum),
    //ContaPoupanca e Conta Especial:
    static Contas cc = new Contas();
    static ContaPoupanca cp = new ContaPoupanca();
    static ContaEspecial ce = new ContaEspecial();
    //Criação de variáveis globais úteis no desenvolvimento(taxa e multa):
    // Penalty => multa
    static double tax;
    static int penalty;
    
    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTexto = new javax.swing.JLabel();
        btnSaque = new javax.swing.JButton();
        btnDeposit = new javax.swing.JButton();
        btnTransfer = new javax.swing.JButton();
        btnReajust = new javax.swing.JButton();
        btnVerSaldo = new javax.swing.JButton();
        btnQuit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTexto.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblTexto.setText("Selecione a operação desejada");

        btnSaque.setText("Saque");
        btnSaque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaqueActionPerformed(evt);
            }
        });

        btnDeposit.setText("Depósito");
        btnDeposit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDepositActionPerformed(evt);
            }
        });

        btnTransfer.setText("Transferência");

        btnReajust.setText("Reajustar");

        btnVerSaldo.setText("Ver saldos");

        btnQuit.setText("Sair");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addComponent(lblTexto))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnTransfer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnVerSaldo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSaque, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnReajust, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                            .addComponent(btnDeposit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnQuit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(117, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(lblTexto)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSaque)
                    .addComponent(btnDeposit))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTransfer)
                    .addComponent(btnReajust))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnVerSaldo)
                    .addComponent(btnQuit))
                .addContainerGap(93, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // DÚVIDA == FAZER POR ÚLTIMO => SAQUE
    private void btnSaqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaqueActionPerformed
        
        int countNumber = Integer.parseInt(JOptionPane.showInputDialog(null, "Digite o número da conta: "));
        double value = Double.parseDouble(JOptionPane.showInputDialog(null, "Digite o valor: R$ "));
                
        if( cc.getNumber() == countNumber ){
            if( cc.withdraw(value) == false ){
                JOptionPane.showMessageDialog(null, "Saldo insuficiente na conta nº "+countNumber, "Saldo insuficiente", JOptionPane.ERROR_MESSAGE);
            }else{
                JOptionPane.showMessageDialog(null, "Saque realizado com sucesso!", "Sucesso no saque", JOptionPane.INFORMATION_MESSAGE);
            }
        }else if( cp.getNumber() == countNumber ){
            if( cp.withdraw(value) == false ){
                JOptionPane.showMessageDialog(null, "Saldo insuficiente na conta nº "+countNumber, "Saldo insuficiente", JOptionPane.ERROR_MESSAGE);
            }else{
                JOptionPane.showMessageDialog(null, "Saque realizado com sucesso!", "Sucesso no saque", JOptionPane.INFORMATION_MESSAGE);
            }
        }else if( ce.getNumber() == countNumber ){
            if( ce.withdraw(value) == false ){
                JOptionPane.showMessageDialog(null, "Saldo insuficiente na conta nº "+countNumber, "Saldo insuficiente", JOptionPane.ERROR_MESSAGE);
            }else{
                JOptionPane.showMessageDialog(null, "Saque realizado com sucesso!", "Sucesso no saque", JOptionPane.INFORMATION_MESSAGE);
            }
        }else{
            JOptionPane.showMessageDialog(null, "Número "+countNumber+" de conta inválido", "Número inválido", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnSaqueActionPerformed

    //MÉTODO PARA DEPÓSITO:
    private void btnDepositActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDepositActionPerformed
        //A variávei countNumber guarda o número da conta de onde será depositada o valor 'value':
        int countNumber = Integer.parseInt(JOptionPane.showInputDialog(null, "Digite o número da conta: ", "Depósito", 
                JOptionPane.INFORMATION_MESSAGE));
        double value = Double.parseDouble(JOptionPane.showInputDialog(null, "Digite o valor a ser depositado: R$ ", "Dpósito", 
                JOptionPane.INFORMATION_MESSAGE));
        
        //Array de Strings com as possíveis respostas de Confirmar ou cancelar um depósito:
        String[] options = {"Confirmar", "Cancelar"};
        //O método showOptionDialog retornará um inteiro referente ao índice onde se locaiza a
        //resposta do usuário no array 'options'. Por exemplo: se ele selecionar a opção confirmar, o
        //método retornará 0, caso contrário retornará -1.
        int resposta;
        
        if( countNumber == cc.getNumber() ){
            
            //Frame JOption de confirmação do depósito:
            resposta = JOptionPane.showOptionDialog(null, "Conta: "+cc.countType()+"\n Titular: "+cc.getName()+"\n Número da conta: "+cc.getNumber()+"\n"
                    + "Depósito: R$ "+value+"\n Clique em 'Confirmar' para realizar o depósito.", "Confirmação", 
                    JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[0]);

            //Checagem de resposta:
            if( resposta == 0 ){
                cc.deposit(value);
                JOptionPane.showMessageDialog(null, "Depósito realizado com sucesso! \n Novo saldo: R$ "+cc.getAmount(),
                        "Confirmação de depósito", JOptionPane.INFORMATION_MESSAGE);
            }else{
                JOptionPane.showMessageDialog(null, "Depósito cancelado com sucesso!", "Cancelamento de depósito", JOptionPane.INFORMATION_MESSAGE);
            }
            
        }else if( countNumber == cp.getNumber() ){
            
            //Frame JOption de confirmação do depósito:
            resposta = JOptionPane.showOptionDialog(null, "Conta: "+cp.countType()+"\n Titular: "+cp.getName()+"\n Número da conta: "+cp.getNumber()+"\n"
                    + "Depósito: R$ "+value+"\n Clique em 'Confirmar' para realizar o depósito.", "Confirmação", 
                    JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[0]);

            //Checagem de resposta:
            if( resposta == 0 ){
                cp.deposit(value);
                JOptionPane.showMessageDialog(null, "Depósito realizado com sucesso! \n Novo saldo: R$ "+cp.getAmount(),
                        "Confirmação de depósito", JOptionPane.INFORMATION_MESSAGE);
            }else{
                JOptionPane.showMessageDialog(null, "Depósito cancelado com sucesso!", "Cancelamento de depósito", JOptionPane.INFORMATION_MESSAGE);
            }
            
        } else if (countNumber == ce.getNumber() ){
            //Frame JOption de confirmação do depósito:
            resposta = JOptionPane.showOptionDialog(null, "Conta: "+ce.countType()+"\n Titular: "+ce.getName()+"\n Número da conta: "+ce.getNumber()+"\n"
                    + "Depósito: R$ "+value+"\n Clique em 'Confirmar' para realizar o depósito.", "Confirmação", 
                    JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[0]);

            //Checagem de resposta:
            if( resposta == 0 ){
                ce.deposit(value);
                JOptionPane.showMessageDialog(null, "Depósito realizado com sucesso! \n Novo saldo: R$ "+ce.getAmount(),
                        "Confirmação de depósito", JOptionPane.INFORMATION_MESSAGE);
            }else{
                JOptionPane.showMessageDialog(null, "Depósito cancelado com sucesso!", "Cancelamento de depósito", JOptionPane.INFORMATION_MESSAGE);
            }
        //Se a variável 'countNumber' não corresponder a nenhuma das três contas, um aviso será feito ao usuário:
        }else{
            JOptionPane.showMessageDialog(null, "Número de conta inválido!", "Erro De Conta", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDepositActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        
        /*
            Parte inicial das boas-vindas do software:
        */
        
        /*
            String[] options = {"Confirmar", "Cancelar"};
            int resposta = JOptionPane.showOptionDialog(null, "Clique Confirmar para continuar", "Informação", 
                    JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[0]);

            if( resposta == 0 ){
                System.out.println("Confirmado!");
            }else{
                System.out.println("Cancelado!");
            }
        */
        
        
        JOptionPane.showMessageDialog(null, "Seja bem-vindo ao sistema bancário!", "Boas-vindas", JOptionPane.INFORMATION_MESSAGE);
        JOptionPane.showMessageDialog(null, "Prosseguiremos com os seus dados a respeito da conta-comum", "Conta-comum", JOptionPane.INFORMATION_MESSAGE);
        
        /*
            Preenchimento das regras de negócio(já definidas nas classes) para a Conta Comum:
        */
        cc.setName(JOptionPane.showInputDialog(null, "Diigte seu nome: ", "Conta-comum"));
        boolean saldoCorreto = true;
        boolean numeroCorreto = true;
        
        //Uma estrutura para obrigar o usuário a digitar valores corretos para cada campo da conta comum:
        do{
            cc.setNumber(Integer.parseInt(JOptionPane.showInputDialog(null, "Digite o número da conta: ", "Conta-comum")));
            cc.initAmount(Double.parseDouble(JOptionPane.showInputDialog(null, "Digite o saldo inicial: ", "Conta-comum")));
            
            //Os dados só serão gravados se o saldo(amount) for maior ou igual a 0 e o número da conta maior do que 0:
            if(cc.getAmount() < 0 ){
                JOptionPane.showMessageDialog(null, "Digite um saldo maior ou igual a R$ 0,00 !", "Erro Conta-Comum", JOptionPane.ERROR_MESSAGE);
                saldoCorreto = false;
            }else if ( cc.getNumber() <= 0){
                JOptionPane.showMessageDialog(null, "Digite um número da conta maior do que 0 !", "Erro Conta-Comum", JOptionPane.ERROR_MESSAGE);
                numeroCorreto = false;
            }else{
                saldoCorreto = true;
                numeroCorreto = true;
            }
        }while(saldoCorreto == false || numeroCorreto == false);
        
        JOptionPane.showMessageDialog(null, "Prosseguiremos com os seus dados a respeito da conta-poupança", "Conta-poupança", 
                JOptionPane.INFORMATION_MESSAGE);
        
        /*
            Preenchimento das regras de negócio(já definidas nas classes) para a Conta Poupança:
        */
        cp.setName(JOptionPane.showInputDialog(null, "Diigte seu nome: ", "Conta-poupança"));
        tax = Double.parseDouble(JOptionPane.showInputDialog(null, "Digite a taxa de reajuste: ", "Conta-poupança"));
        saldoCorreto = true;
        numeroCorreto = true;
        
        //Uma estrutura para obrigar o usuário a digitar valores corretos para cada campo da conta Poupança:
        do{
            cp.setNumber(Integer.parseInt(JOptionPane.showInputDialog(null, "Digite o número da conta: ", "Conta-poupança")));
            cp.initAmount(Double.parseDouble(JOptionPane.showInputDialog(null, "Digite o saldo inicial: ", "Conta-poupança")));
            
            //Os dados só serão gravados se o saldo(amount) for maior ou igual a 0 e o número da conta maior do que 0:
            if(cp.getAmount() < 0 ){
                JOptionPane.showMessageDialog(null, "Digite um saldo maior ou igual a R$ 0,00 !", "Erro Conta-poupança", JOptionPane.ERROR_MESSAGE);
                saldoCorreto = false;
            }else if ( cp.getNumber() <= 0){
                JOptionPane.showMessageDialog(null, "Digite um número da conta maior do que 0 !", "Erro Conta-poupança", JOptionPane.ERROR_MESSAGE);
                numeroCorreto = false;
            }else{
                saldoCorreto = true;
                numeroCorreto = true;
            }
        }while(saldoCorreto == false || numeroCorreto == false);
        
        JOptionPane.showMessageDialog(null, "Prosseguiremos com os seus dados a respeito da conta-especial", "Conta-especial", 
                JOptionPane.INFORMATION_MESSAGE);
        
        /*
            Preenchimento das regras de negócio(já definidas nas classes) para a Conta Especial:
        */
        ce.setName(JOptionPane.showInputDialog(null, "Diigte seu nome: ", "Conta-especial"));
        saldoCorreto = true;
        numeroCorreto = true;
        boolean limiteCorreto = true;
        
        //Uma estrutura para obrigar o usuário a digitar valores corretos para cada campo da conta especial:
        do{
            ce.setLimit(Integer.parseInt(JOptionPane.showInputDialog(null, "Digite o limite da conta: ", "Conta-especial")));
            ce.setNumber(Integer.parseInt(JOptionPane.showInputDialog(null, "Digite o número da conta: ", "Conta-especial")));
            ce.initAmount(Double.parseDouble(JOptionPane.showInputDialog(null, "Digite o saldo inicial: ", "Conta-esécial")));
            
            //Os dados só serão gravados se o saldo(amount) e o limite forem maiores ou iguais a 0 e o número da conta maior do que 0:
            if(ce.getAmount() < 0 ){
                JOptionPane.showMessageDialog(null, "Digite um saldo maior ou igual a R$ 0,00 !", "Erro Conta-especial", JOptionPane.ERROR_MESSAGE);
                saldoCorreto = false;
            }else if ( ce.getNumber() <= 0){
                JOptionPane.showMessageDialog(null, "Digite um número da conta maior do que 0 !", "Erro Conta-especial", JOptionPane.ERROR_MESSAGE);
                numeroCorreto = false;
            }else if(ce.getLimit() <= 0){
                JOptionPane.showMessageDialog(null, "Digite um valor limite maior do que 0 !", "Erro Conta-especial", JOptionPane.ERROR_MESSAGE);
                limiteCorreto = false;
            }else{
                saldoCorreto = true;
                numeroCorreto = true;
                limiteCorreto = true;
            }
        }while(saldoCorreto == false || numeroCorreto == false || limiteCorreto == false);

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeposit;
    private javax.swing.JButton btnQuit;
    private javax.swing.JButton btnReajust;
    private javax.swing.JButton btnSaque;
    private javax.swing.JButton btnTransfer;
    private javax.swing.JButton btnVerSaldo;
    private javax.swing.JLabel lblTexto;
    // End of variables declaration//GEN-END:variables
}
